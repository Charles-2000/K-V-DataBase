fstream tmp_file("tmp.txt", ios::binary | ios::out);  //create temporary Append-Only File
	if (tmp_file.fail())
		return KVDB_NO_SPACE_LEFT_ON_DEVICES;

	fstream& f = handler->get_db_file();
	f.seekg(0, ios::beg);	//locate the pointer to the begin of file

	uint32_t keyl, valuel, _keyl, _valuel;
	string _key, _value = "";
	int pos = 0;  //the position of read pointer

	//get keys and values, set them into tmp_file
	while (f.peek() != EOF)
	{
		f.read(reinterpret_cast<char*>(&keyl), sizeof(uint32_t));
		f.read(reinterpret_cast<char*>(&valuel), sizeof(uint32_t));
		f.read(tmp, keyl * sizeof(char));
		_key = tmp;
		_key = _key.substr(0, keyl);
		pos = f.tellg(); //Record the current pointer position.

		if (get(handler, _key, _value) == KVDB_OK)
		{
			_keyl = _key.length();
			_valuel = _value.length();

			tmp_file.write(reinterpret_cast<char*>(&_keyl), sizeof(uint32_t));
			tmp_file.write(reinterpret_cast<char*>(&_valuel), sizeof(uint32_t));
			tmp_file.write(_key.c_str(), _keyl * sizeof(char));
			tmp_file.write(_value.c_str(), _valuel * sizeof(char));
		}
			
		f.seekg(pos, ios::beg);
		f.seekg(valuel, ios::cur);
		
	}

	//set keys and values from tmp_file to db_file
	f.close();
	tmp_file.close();
	fstream tmp_f("tmp.txt", ios::binary);

	f.open(handler->getFilePath().c_str(), ios::binary | ios::trunc); 

	while (tmp_f.peek() != EOF)
	{
		tmp_f.read(reinterpret_cast<char*>(&keyl), sizeof(uint32_t));
		tmp_f.read(reinterpret_cast<char*>(&valuel), sizeof(uint32_t));
		tmp_f.read(tmp, keyl * sizeof(char));
		_key = tmp;
		_key = _key.substr(0, keyl);
		tmp_f.read(tmp, valuel * sizeof(char));
		_value = tmp;
		_value = _value.substr(0, valuel);

		f.write(reinterpret_cast<char*>(&keyl), sizeof(uint32_t));
		f.write(reinterpret_cast<char*>(&valuel), sizeof(uint32_t));
		f.write(_key.c_str(), keyl * sizeof(char));
		f.write(_value.c_str(), valuel * sizeof(char));
	}

	tmp_f.close();

	return KVDB_OK;
